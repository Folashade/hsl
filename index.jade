doctype html
html
  head
    meta( charset='utf-8' )
    title HSL â€“ The RGB Youâ€™ve Been Waiting For
    link( href='slides.css' rel='stylesheet' type='text/css' )

  body( ng-app='hsl' ): deck

    slide
      | HSL
      | ===
      | 
      | The RGB You've Been Waiting For
      | -------------------------------
    notes
      | This is a talk which I put together for the February 2016 PeninsulaJS
      | meetup. It should be digestable as a web page on its own and
      | interactive.
      | 
      | The source for these slides is available at [github.com/visnup/hsl][src].
      | 
      | [src]: https://github.com/visnup/hsl

    slide
      | The Problem
      | ===========
    notes
      | - RGB + RGB = ðŸ¤”
      |   - Demo: Adding and subtracting RGB colors
      | - It's about adding *light* together
      |   - Demo: RGB values next to each other and the color they make (zoom
      |     in and out)
      | - Conclusion: RGB is not cool
      
    slide
      | Let's make our own color space
      | ==============================
    notes
      | - "Color space" = a system to specify a color and reason about sets of
      |   colors
      | - Analogy with Cartesian coordinates and reasoning about space
      |   - Demo: RGB as XYZ
      |   - XYZ is an ok coordinate system, but starts failing if all you care
      |     about is "How far are you from the origin?"
      | - Task: Design a system to quickly specify a color (intuitively)
      |   - How would you do that intuitively to the person sitting next to you?
      |   - Ask an attendee to describe an arbitrary color in the room
      
    slide
      | Hue
      | ---
      
    slide
      | Saturation
      | ----------
      
    slide
      | Lightness
      | ---------
      
    slide
      | Putting it all together
      | =======================
    notes
      | - Gamut
      | - Transform from RGB
      
    slide
      | Let's do some stuff with HSL
      | ============================
      
    slide
      | Lighten a color
      | ---------------
    notes
      | - This is the original problem at the beginning
    
    slide
      | Grayscale a photo
      | -----------------

    slide
      | Make a color palette
      | --------------------
      
    slide
      | HSL is everywhere already
      | =========================
    notes
      | - Chrome dev tools
      | - Color pickers
      |   - OS X
      |   - Sketch
      |   - Google slides
      | - colorhexa.com
      
    slide
      | Problems
      | ========
    notes
      | - LABCIE
      
    script( src='https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.5.0/angular.min.js' )
    script( src='https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.5.0/lodash.min.js' )
    script( src='https://cdnjs.cloudflare.com/ajax/libs/marked/0.3.5/marked.min.js' )
    script.
      angular
        .module('hsl', [])
        .component('deck', {
          controller($document) {
            this.slides = []
            
            this.add = function(slide) {
              slide.index(this.slides.length)
              this.slides.push(slide)
            }

            $document.on('keydown', function(e) {
              var index = +location.hash.slice(1) || 0
              switch (e.keyIdentifier) {
                case 'Right':
                  index++
                  break
                case 'Left':
                  index--
                  break
              }
              location.hash = _.clamp(index, 0, this.slides.length)
            }.bind(this))
          }
        })
        .component('slide', {
          require: { deck: '^deck' },
          controller($element) {
            var html = marked($element.text())
            $element.html(html)
            
            this.$onInit = function() {
              this.deck.add(this)
            }
            
            this.index = function(index) {
              $element.attr('id', index)
            }
          }
        })
        .component('notes', {
          controller($element) {
            var html = marked($element.text())
            $element.html(html)
          }
        })
