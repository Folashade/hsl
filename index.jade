doctype html
html
  head
    meta( charset='utf-8' )
    meta( name='viewport' content='initial-scale=1,user-scalable=no' )
    title HSL â€“ The RGB Youâ€™ve Been Waiting For
    link( href='slides.css' rel='stylesheet' type='text/css' )

  body( ng-app='hsl' ): deck

    slide
      :marked
        HSL
        ===

        The RGB You've Been Waiting For
        -------------------------------

    notes
      :marked
        This is a talk put together for the February 2016 [PeninsulaJS][1]
        meetup. It should be digestable as a web page on its own and
        interactive.

        The source for these slides is available at
        [github.com/visnup/hsl][2].

        [1]: http://peninsulajs.com/
        [2]: https://github.com/visnup/hsl

    slide.xs-center
      :marked
        The Problem
        ===========

      div( ng-init='lhs=$root.RGB("ff","a5","00"); rhs=$root.RGB("33","33","33")' )
        span.swatch( ng-style="{backgroundColor: lhs}" )
        input.c( ng-model='lhs.r' placeholder='R' ng-style='{borderBottomColor: lhs.rx}' )
        input.c( ng-model='lhs.g' placeholder='G' ng-style='{borderBottomColor: lhs.gx}' )
        input.c( ng-model='lhs.b' placeholder='B' ng-style='{borderBottomColor: lhs.bx}' )
        .op.text-muted +
        span.swatch( ng-style="{backgroundColor: rhs}" )
        input.c( ng-model='rhs.r' placeholder='R' ng-style='{borderBottomColor: rhs.rx}' )
        input.c( ng-model='rhs.g' placeholder='G' ng-style='{borderBottomColor: rhs.gx}' )
        input.c( ng-model='rhs.b' placeholder='B' ng-style='{borderBottomColor: rhs.bx}' )
        .op.text-muted =
        span( ng-show='false' ) {{sum = lhs.plus(rhs)}}
        span.swatch( ng-style="{backgroundColor: sum}" )
        input.c( ng-model='sum.r' placeholder='R' ng-style='{borderBottomColor: sum.rx}' readonly )
        input.c( ng-model='sum.g' placeholder='G' ng-style='{borderBottomColor: sum.gx}' readonly )
        input.c( ng-model='sum.b' placeholder='B' ng-style='{borderBottomColor: sum.bx}' readonly )

    notes
      :marked
        RGB + RGB = ðŸ¤”
        --------------
        `#ffa500`â€Š--â€Šthat's orange. `#ffd833`â€Š--â€Šthat's not a lighter orange;
        it's yellow. _Of course_, you're thinking, _one does not simply add
        some GB to RGB to lighten a color_.

        Ok fine, then how do you lighten orange to get light orange? And wait,
        hold on: why canâ€™t I just add Rs, Gs, and Bs to lighten my colors? I
        mean, my computer knows `1 + 1 = 2`; it and I can agree on that. Yet
        `#ffa500` + `#004999` yields some kinda related color, but in a way
        that doesnâ€™t exactly make sense.

        In what world is that cool? I'll tell you in what world: in an
        adding-colors-of-light-together world. You know who lives in that
        world?  LEDs and CRTs, thatâ€™s who. And scientists who play with lasers,
        AKA crazy people.

    slide
      :marked
        RGB: adding lasers together
        ===========================

      div( ng-init='rgb=$root.RGB("ff","a5","00")' )
        span.swatch( ng-style="{backgroundColor: rgb}" )
        input.c( ng-model='rgb.r' placeholder='R' ng-style='{borderBottomColor: rgb.rx}' )
        input.c( ng-model='rgb.g' placeholder='G' ng-style='{borderBottomColor: rgb.gx}' )
        input.c( ng-model='rgb.b' placeholder='B' ng-style='{borderBottomColor: rgb.bx}' )

    notes
      :marked
        - Demo: RGB values next to each other and the color they make (zoom
          in and out)

        RGB is _not_ like some single origin, shade-grown, 1,300 meter
        elevation coffee beans you found in Alajuela, Costa Rica and roasted in
        small batches to give to your friends in Oakland.

        RGB _is_ like that guy in a North Face jacket and hoodie on the 38L
        Geary headed downtown, doing a line of cocaine off his iPhone. Yeah,
        RGB is not a | so-uncool-itâ€™s-cool-again thing.

    slide
      :marked
        <img src="https://pbs.twimg.com/media/Ay25GrnCMAEgjyW.jpg" style="height: 50vh" />

        Some guy doing lines of cocaine off his iphone on muni...  
        -- Nolan Evans (@nolman) <a href="https://twitter.com/nolman/status/229042680498368513">July 28, 2012</a>

    slide
      :marked
        Let's make our own color space
        ==============================
    notes
      :marked
        - "Color space" = a system to specify a color and reason about sets of
          colors
        - Analogy with Cartesian coordinates and reasoning about space
          - Demo: RGB as XYZ
          - XYZ is an ok coordinate system, but starts failing if all you care
            about is "How far are you from the origin?"
        - Task: Design a system to quickly specify a color (intuitively)
          - How would you do that intuitively to the person sitting next to you?
          - Ask an attendee to describe an arbitrary color in the room

        Letâ€™s pretend we were tasked with representing all the colors in an
        intuitive way. How would we start? How about, let's just take the
        rainbow (ROY G. BIV!) and stick it in a kinda big array:
      
    slide
      :marked
        Color / Swatch / Hue
        --------------------

      .hue( ng-init='buckets = 9' )
        p Letâ€™s divide the rainbow up into 
          input.c( type='number' step=3 ng-model='buckets' placeholder='#' )
          |  colors:

        .hues( style='display: flex; justify-content: space-between' )
          span.swatch(
            ng-style="{backgroundColor: $root.HSL(c*360/buckets, 100, 50)}"
            ng-repeat='c in $root._.range(0, buckets)' )
        .indexes( style='display: flex; justify-content: space-between' )
          span( ng-repeat='c in [0, 1, 2, 3]' ) {{c*buckets/3 | number}}

    notes
      :marked
        That's kinda intuitive-looking already. We've got all of the colors our
        eyes can see in an array indexed from 0 to 100. So, if I want red I
        just grab the color at 0 and if I want magenta, I grab the one at 100.
        20ish is yellow and 50ish is cyan; itâ€™s just a mapping and as we move
        up and down the scale we get a predictable color from the rainbow.

    slide
      :marked
        Brightness / Colorfulness / Saturation
        --------------------------------------

      .saturation( ng-init='hsl = $root.HSL(300, 100, 50)' )
        p Given a hue of 
          span.swatch( ng-style='{backgroundColor: $root.HSL(hsl.h, 100, 50)}' )
          input.c( ng-model='hsl.h' placeholder='H' ng-style='{borderBottomColor: $root.HSL(hsl.h, 100, 50)}' )
          | ,

        .hues( style='display: flex; justify-content: space-between' )
          span.swatch(
            ng-style="{backgroundColor: $root.HSL(c, hsl.s, hsl.l)}"
            ng-repeat='c in $root._.range(0, 360)'
            ng-mouseenter='hsl.h = c' )
        .indexes( style='display: flex; justify-content: space-between' )
          span( ng-repeat='c in [0, 1, 2, 3]' ) {{c*360/3 | number}}

        p letâ€™s remove <b>colorfulness</b> from it on a scale from 0 to 100:

        .saturations( style='display: flex; justify-content: space-between' )
          span.swatch(
            ng-style="{backgroundColor: $root.HSL(hsl.h, s, hsl.l)}"
            ng-repeat='s in $root._.range(0, 100)'
            ng-click='hsl.s = s' )
        .indexes( style='display: flex; justify-content: space-between' )
          span( ng-repeat='c in [0, 1, 2]' ) {{c*100/2 | number}}

    slide
      :marked
        Lightness
        ---------
      
    slide
      :marked
        Putting it all together
        =======================
    notes
      :marked
        - Gamut
        - Transform from RGB
      
    slide
      :marked
        Let's do some stuff with HSL
        ============================
      
    slide
      :marked
        Lighten a color
        ---------------
    notes
      :marked
        - This is the original problem at the beginning
    
    slide
      :marked
        Grayscale a photo
        -----------------

    slide
      :marked
        Make a color palette
        --------------------
      
    slide
      :marked
        HSL is everywhere already
        =========================
    notes
      :marked
        - Chrome dev tools
        - Color pickers
          - OS X
          - Sketch
          - Google slides
        - colorhexa.com
      
    slide
      :marked
        Problems
        ========
    notes
      :marked
        - LABCIE
      
    script( src='https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.5.0/angular.min.js' )
    script( src='https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.5.0/lodash.min.js' )
    script.
      'use strict'

      class RGB {
        constructor(r, g, b) {
          this.r = r
          this.g = g
          this.b = b
        }

        set r(r) { this._r = parseInt(r || 0, 16) }
        set g(g) { this._g = parseInt(g || 0, 16) }
        set b(b) { this._b = parseInt(b || 0, 16) }

        get r()  { return this._r.toString(16) }
        get g()  { return this._g.toString(16) }
        get b()  { return this._b.toString(16) }

        get rx() { return new RGB(this._r, 0, 0) }
        get gx() { return new RGB(0, this._g, 0) }
        get bx() { return new RGB(0, 0, this._b) }

        plus(other) {
          var r = _.clamp(this._r + other._r, 0, 255),
              g = _.clamp(this._g + other._g, 0, 255),
              b = _.clamp(this._b + other._b, 0, 255)
          return new RGB(r.toString(16), g.toString(16), b.toString(16))
        }

        toString() {
          return `rgb(${this._r},${this._g},${this._b})`
        }
      }

      class HSL {
        constructor(h, s, l) {
          this.h = h
          this.s = s
          this.l = l
        }

        toString() {
          return `hsl(${this.h},${this.s}%,${this.l}%)`
        }
      }

      angular
        .module('hsl', [])
        .component('deck', {
          controller($document) {
            this.slides = []
            
            this.add = function(slide) {
              slide.index(this.slides.length)
              this.slides.push(slide)
            }

            $document.on('keydown', function(e) {
              if (e.target.nodeName !== 'BODY') return
              var index = +location.hash.slice(1) || 0
              switch (e.keyIdentifier) {
                case 'Right':
                  index++
                  break
                case 'Left':
                  index--
                  break
              }
              location.hash = _.clamp(index, 0, this.slides.length)
            }.bind(this))
          }
        })
        .component('slide', {
          require: { deck: '^deck' },
          controller($scope, $element) {
            this.$onInit = function() {
              this.deck.add(this)
            }
            
            this.index = function(index) {
              $element.attr('id', index)
            }
          }
        })
        .run(function($rootScope) {
          $rootScope._ = _
          $rootScope.RGB = function(r, g, b) { return new RGB(r, g, b) }
          $rootScope.HSL = function(h, s, l) { return new HSL(h, s, l) }
        })
