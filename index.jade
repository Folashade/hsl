doctype html
html
  head
    meta( charset='utf-8' )
    title HSL â€“ The RGB Youâ€™ve Been Waiting For
    link( href='slides.css' rel='stylesheet' type='text/css' )

  body( ng-app='hsl' ): deck

    slide
      | HSL
      | ===
      | 
      | The RGB You've Been Waiting For
      | -------------------------------

    notes
      | This is a talk put together for the February 2016 [PeninsulaJS][1]
      | meetup. It should be digestable as a web page on its own and
      | interactive.
      | 
      | The source for these slides is available at
      | [github.com/visnup/hsl][2].
      | 
      | [1]: http://peninsulajs.com/
      | [2]: https://github.com/visnup/hsl

    slide
      | The Problem
      | ===========
      | 
      | <div ng-init='lhs=$root.RGB("ff","a5","00"); rhs=$root.RGB("33","33","33")'>
      | <span class="swatch" ng-style="{backgroundColor: lhs}"></span>
      | <input ng-model='lhs.r' placeholder='R' class='d' />
      | <input ng-model='lhs.g' placeholder='G' class='d' />
      | <input ng-model='lhs.b' placeholder='B' class='d' />
      | +
      | <span class="swatch" ng-style="{backgroundColor: rhs}"></span>
      | <input ng-model='rhs.r' placeholder='R' class='d' />
      | <input ng-model='rhs.g' placeholder='G' class='d' />
      | <input ng-model='rhs.b' placeholder='B' class='d' />
      | =
      | <span class="swatch" ng-style="{backgroundColor: lhs.plus(rhs)}"></span>
      | <input ng-model='lhs.plus(rhs).r' placeholder='R' class='d' readonly />
      | <input ng-model='lhs.plus(rhs).g' placeholder='G' class='d' readonly />
      | <input ng-model='lhs.plus(rhs).b' placeholder='B' class='d' readonly />
      | </div>

    notes
      | RGB + RGB = ðŸ¤”
      | --------------
      | `#ffa500`â€Š--â€Šthat's orange. `#ffd833`â€Š--â€Šthat's not a lighter orange;
      | it's yellow. _Of course_, you're thinking, _one does not simply add
      | some GB to RGB to lighten a color_.
      | 
      | Ok fine, then how do you lighten orange to get light orange? And wait,
      | hold on: why canâ€™t I just add Rs, Gs, and Bs to lighten my colors? I
      | mean, my computer knows `1 + 1 = 2`; it and I can agree on that. Yet
      | `#ffa500` + `#004999` yields some kinda related color, but in a way
      | that doesnâ€™t exactly make sense.
      | 
      | In what world is that cool? I'll tell you in what world: in an
      | adding-colors-of-light-together world. You know who lives in that
      | world?  LEDs and CRTs, thatâ€™s who. And scientists who play with lasers,
      | AKA crazy people.

    slide
      | RGB is for adding light together
      | ================================
      | 
      | <div ng-init='lhs=$root.RGB("ff","a5","00"); rhs=$root.RGB("33","33","33")'>
      | <span class="swatch" ng-style="{backgroundColor: lhs}"></span>
      | <input ng-model='lhs.r' placeholder='R' class='d' />
      | <input ng-model='lhs.g' placeholder='G' class='d' />
      | <input ng-model='lhs.b' placeholder='B' class='d' />
      | +
      | <span class="swatch" ng-style="{backgroundColor: rhs}"></span>
      | <input ng-model='rhs.r' placeholder='R' class='d' />
      | <input ng-model='rhs.g' placeholder='G' class='d' />
      | <input ng-model='rhs.b' placeholder='B' class='d' />
      | =
      | <span class="swatch" ng-style="{backgroundColor: lhs.plus(rhs)}"></span>
      | <input ng-model='lhs.plus(rhs).r' placeholder='R' class='d' readonly />
      | <input ng-model='lhs.plus(rhs).g' placeholder='G' class='d' readonly />
      | <input ng-model='lhs.plus(rhs).b' placeholder='B' class='d' readonly />
      | </div>

    notes
      | - Demo: RGB values next to each other and the color they make (zoom
      |   in and out)
      | 
      | RGB is _not_ like some single origin, shade-grown, 1,300 meter
      | elevation coffee beans you found in Alajuela, Costa Rica and roasted in
      | small batches to give to your friends in Oakland.
      | 
      | RGB _is_ like that guy in a North Face jacket and hoodie on the 38L
      | Geary headed downtown, doing a line of cocaine off his iPhone. Yeah,
      | RGB is not a | so-uncool-itâ€™s-cool-again thing.

    slide
      | <img src="https://pbs.twimg.com/media/Ay25GrnCMAEgjyW.jpg" style="height: 50vh" />
      | 
      | Some guy doing lines of cocaine off his iphone on muni...  
      | -- Nolan Evans (@nolman) <a href="https://twitter.com/nolman/status/229042680498368513">July 28, 2012</a>

    slide
      | Let's make our own color space
      | ==============================
    notes
      | - "Color space" = a system to specify a color and reason about sets of
      |   colors
      | - Analogy with Cartesian coordinates and reasoning about space
      |   - Demo: RGB as XYZ
      |   - XYZ is an ok coordinate system, but starts failing if all you care
      |     about is "How far are you from the origin?"
      | - Task: Design a system to quickly specify a color (intuitively)
      |   - How would you do that intuitively to the person sitting next to you?
      |   - Ask an attendee to describe an arbitrary color in the room
      
    slide
      | Hue
      | ---
      
    slide
      | Saturation
      | ----------
      
    slide
      | Lightness
      | ---------
      
    slide
      | Putting it all together
      | =======================
    notes
      | - Gamut
      | - Transform from RGB
      
    slide
      | Let's do some stuff with HSL
      | ============================
      
    slide
      | Lighten a color
      | ---------------
    notes
      | - This is the original problem at the beginning
    
    slide
      | Grayscale a photo
      | -----------------

    slide
      | Make a color palette
      | --------------------
      
    slide
      | HSL is everywhere already
      | =========================
    notes
      | - Chrome dev tools
      | - Color pickers
      |   - OS X
      |   - Sketch
      |   - Google slides
      | - colorhexa.com
      
    slide
      | Problems
      | ========
    notes
      | - LABCIE
      
    script( src='https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.5.0/angular.min.js' )
    script( src='https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.5.0/lodash.min.js' )
    script( src='https://cdnjs.cloudflare.com/ajax/libs/marked/0.3.5/marked.min.js' )
    script.
      'use strict'

      marked.setOptions({ smartypants: true })

      class RGB {
        constructor(r, g, b) {
          this.r = r
          this.g = g
          this.b = b
        }

        get r() { return this._r }
        set r(r) { this.__r = parseInt(this._r = r, 16) }
        get g() { return this._g }
        set g(g) { this.__g = parseInt(this._g = g, 16) }
        get b() { return this._b }
        set b(b) { this.__b = parseInt(this._b = b, 16) }

        plus(other) {
          var r = _.clamp(this.__r + other.__r, 0, 255),
              g = _.clamp(this.__g + other.__g, 0, 255),
              b = _.clamp(this.__b + other.__b, 0, 255)
          return new RGB(r.toString(16), g.toString(16), b.toString(16))
        }

        toString() {
          return `rgb(${this.__r},${this.__g},${this.__b})`
        }
      }

      angular
        .module('hsl', [])
        .component('deck', {
          controller($document) {
            this.slides = []
            
            this.add = function(slide) {
              slide.index(this.slides.length)
              this.slides.push(slide)
            }

            $document.on('keydown', function(e) {
              if (e.target.nodeName !== 'BODY') return
              var index = +location.hash.slice(1) || 0
              switch (e.keyIdentifier) {
                case 'Right':
                  index++
                  break
                case 'Left':
                  index--
                  break
              }
              location.hash = _.clamp(index, 0, this.slides.length)
            }.bind(this))
          }
        })
        .component('slide', {
          require: { deck: '^deck' },
          controller($scope, $element, $compile) {
            var link = $compile(marked($element.html()))
            $element.empty().append(link($scope))
            
            this.$onInit = function() {
              this.deck.add(this)
            }
            
            this.index = function(index) {
              $element.attr('id', index)
            }
          }
        })
        .component('notes', {
          controller($element) {
            $element.html(marked($element.text()))
          }
        })
        .run(function($rootScope) {
          $rootScope.RGB = function(r, g, b) { return new RGB(r, g, b) }
        })
